#!/usr/bin/env ruby
# chkconfig: 2345 95 20
# description: Some description
# What your script does (not sure if this is necessary though)
# processname: myscript

require 'json'
require 'shellwords'

CONFIG_PATH = ARGV[0] || "/etc/idfly-deploy"

def _get_config()
  config = JSON.parse(File.read(CONFIG_PATH), {symbolize_names: true})

  Dir.foreach('/home') { |dir|
    if dir[0] == '.'
      next
    end

    path = File.join(dir, 'deploy.conf')
    if !File.exist?(path)
      next
    end

    local_config = JSON.parse(File.read(CONFIG_PATH), {symbolize_names: true})
    dir_sym = dir.to_sym()
    if config[:sites][dir_sym].nil?()
      config[:sites][dir_sym] = {user: dir_sym}
    end

    site_config = config[:sites][dir_sym]
    [:name, :url, :message, :path].each() { |key|
      if local_config.has_key?(key)
        site_config[key] = local_config[key]
      end
    }
  }

  return config
end

def deploy(key)
  key = key.to_sym()
  sites = _get_config()[:sites]
  if !sites.has_key?(key)
    STDERR.puts("Site \"#{key}\" not exists")
    return
  end

  site = sites[key]

  deploy_site(site)
  update_redmine_repositories()
  send_slack_notification(site)
end

def deploy_site(site)
  Dir.chdir(site[:path]) {
    _run_command('sudo', '-u', site[:user], 'git', 'pull')
  }

  puts("Site \"#{site[:name]}\" were deployed")
end

def update_redmine_repositories()
  config = _get_config()[:redmine]
  if config.nil?()
    return
  end

  url =
    "#{config[:url]}/sys/fetch_changesets" +
    "?key=#{config[:api_key]}"

  _run_command('wget', url, '-o', '/dev/null')
end

def send_slack_notification(site)
  config = _get_config()[:slack]
  if config.nil?()
    return
  end

  url = site[:slack_webhook_url] || config[:webhook_url]
  if !url
    return
  end

  message = config[:message].
    merge(site[:slack_message] || {}).
    merge({'text' => "#{site[:name]} выгружен на #{site[:url]}"})

  encoded_message = JSON.dump(message)
  _run_command('wget', '--post-data', encoded_message, url, '-o', '/dev/null')
end

def _run_command(*args)
  command = Shellwords.join([*args])

  puts(command)
  puts(system(command))
end

# web server

require 'rack'

app = Proc.new do |env|
  req = Rack::Request.new(env)
  site = req.params['site']
  deploy(site)
  ['200', {'Content-Type' => 'text/html'}, ['OK']]
end

Rack::Handler::WEBrick.run(app, _get_config()[:server] || {})